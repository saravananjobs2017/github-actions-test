name: Triggered from Jira

on:
 workflow_dispatch:
  # repository_dispatch:
  #   types: do-something # Ensure this matches `event_type` in Jira
  
    
jobs:
  process_jira_data:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
           python-version: "3.9"  # Uses latest Python 3
 
      - name: Install dependencies (if needed)
        run: pip install requests  # Add dependencies if required

      - name: Fetch values
        run: |
          set -e  # Stop script on any error
  
          test_suite_id=$(curl --location 'https://equinor.qtestnet.com/api/v3/projects/119783/test-suites?parentId=5332831&parentType=test-cycle' \
          --header 'Content-Type: application/json' \
          --header 'Authorization: Bearer ca42f96c-8c1e-4868-b0cd-5d1f7ad57f21' \
          --data "$(jq -n --arg name '05.04 - Fixed Asset Accounting' \
            --arg plannedStart "$(date -u +"%Y-%m-%dT%H:%M:%S%z" | sed -E 's/([0-9]{2})([0-9]{2})$/\1:\2/')" \
            --arg plannedEnd "$(date -u +"%Y-%m-%dT%H:%M:%S%z" | sed -E 's/([0-9]{2})([0-9]{2})$/\1:\2/')" \
            '{
              name: $name,
              properties: [
                {
                  field_id: -201,
                  field_name: "Planned Start Date",
                  field_value: $plannedStart,
                  field_value_name: "1"
                },
                {
                  field_id: -200,
                  field_name: "Planned End Date",
                  field_value: $plannedEnd,
                  field_value_name: "1"
                }
              ]
            }')"
            )
          echo "Test Suite ID: $test_suite_id"
          test_suite_id=$(echo "$test_suite_id" | jq '.id')

          echo "Extracted ID: $test_suite_id"

          # Extract the first two characters from a string
          FIRST_TWO_CHARS="05.04 - Fixed Asset Accounting"
          FIRST_TWO_CHARS="${FIRST_TWO_CHARS:0:2}"
          echo "Extracted FIRST_TWO_CHARS: $FIRST_TWO_CHARS"
          echo "FIRST_TWO_CHARS=$FIRST_TWO_CHARS" >> $GITHUB_ENV
          
          # Fetch module data
          response=$(curl --silent --location "https://equinor.qtestnet.com/api/v3/projects/119783/modules?search=$FIRST_TWO_CHARS" \
            --header "Authorization: Bearer ca42f96c-8c1e-4868-b0cd-5d1f7ad57f21")

          echo "Response from module search: $response"

          # Extract first module ID safely
          PARENT_ID=$(echo "$response" | jq -r '.[0].id' 2>/dev/null || echo "")

          if [[ -z "$PARENT_ID" || "$PARENT_ID" == "null" ]]; then
            echo "Error: No parent module found!"
            exit 1
          fi

          echo "Extracted Parent ID: $PARENT_ID"

          # Fetch descendants
          response1=$(curl --silent --location "https://equinor.qtestnet.com/api/v3/projects/119783/modules/$PARENT_ID?expand=descendants" \
            --header "Authorization: Bearer ca42f96c-8c1e-4868-b0cd-5d1f7ad57f21")

          # Validate JSON before parsing
          if ! echo "$response1" | jq empty 2>/dev/null; then
            echo "Error: Invalid JSON response from descendants API"
            exit 2
          fi

          # Extract child IDs safely
          child_ids=($(echo "$response1" | jq -r '.children[].id' 2>/dev/null || echo ""))

          if [ ${#child_ids[@]} -eq 0 ]; then
            echo "No child modules found!"
            exit 1
          fi

          echo "Extracted Child IDs: ${child_ids[@]}"

          # Loop through child IDs
          for id in "${child_ids[@]}"; do
            echo "Processing Child ID: $id"

            result=$(curl --silent --location "https://equinor.qtestnet.com/api/v3/projects/119783/test-cases?parentId=$id" \
              --header "Authorization: Bearer ca42f96c-8c1e-4868-b0cd-5d1f7ad57f21")

            if [[ -z "$result" || "$result" == "null" ]]; then
              echo "Error: No test cases found for Parent ID: $id"
              continue
            fi

            # Validate JSON before parsing
            if ! echo "$result" | jq empty 2>/dev/null; then
              echo "Error: Invalid JSON response for test cases"
              continue
            fi

            # Extract test case data
            RESULT=$(echo "$result" | jq -c '[.[] | {id: .id, name: .name}]' 2>/dev/null || echo "[]")

            if [[ -z "$RESULT" || "$RESULT" == "[]" ]]; then
              echo "No valid test cases found!"
              continue
            fi

            echo "Extracted test cases: $RESULT"

            # Pass extracted data to Python script
            python3 <<EOF
          import json
          import requests
          import os

          # Load extracted test case data
          val = '''$RESULT'''
          print(f"From Python validation: {val}")

          try:
              data = json.loads(val)
              for item in data:
                  url = "https://equinor.qtestnet.com/api/v3/projects/119783/test-runs?parentId=7409360&parentType=test-suite"
                  payload = json.dumps({
                      "name": item["name"],
                      "test_case": {"id": item["id"]}
                  })
                  headers = {
                      "Content-Type": "application/json",
                      "Authorization": "Bearer ca42f96c-8c1e-4868-b0cd-5d1f7ad57f21"
                  }
                  response = requests.post(url, headers=headers, data=payload)
                  print("Test Run Response:", response.text)
          except json.JSONDecodeError as e:
              print(f"Error parsing JSON: {e}")
              exit(2)
          EOF
          done
      # - name: Fetch values
      #   run: |
      #    FIRST_TWO_CHARS="05.04 - Fixed Asset Accounting" 
      #    FIRST_TWO_CHARS="${FIRST_TWO_CHARS:0:2}"
      #    echo $FIRST_TWO_CHARS
      #    echo "FIRST_TWO_CHARS=$FIRST_TWO_CHARS" >> $GITHUB_ENV
      #    response=$(curl -v --location "https://equinor.qtestnet.com/api/v3/projects/119783/modules?search=$FIRST_TWO_CHARS" \
      #     --header 'Authorization: Bearer ca42f96c-8c1e-4868-b0cd-5d1f7ad57f21')
      #    echo $response
      #    echo $response | jq -r '.[0].id'

      #    # pass the parent id to get the descendants information.
      #    response1=$(curl --location 'https://equinor.qtestnet.com/api/v3/projects/119783/modules/10714196?expand=descendants' \
      #    --header 'Authorization: Bearer ca42f96c-8c1e-4868-b0cd-5d1f7ad57f21')
      #    # echo $response1 | jq -r '.children[].id'
      #    child_ids=($(echo "$response1" | jq -r '.children[].id'))
      #    echo $child_ids
      #    for id in "${child_ids[@]}"; do
      #       echo "Processing ID: $id"
      #       result=$(curl --location "https://equinor.qtestnet.com/api/v3/projects/119783/test-cases?parentId=$id" \
      #         --header "Authorization: Bearer ca42f96c-8c1e-4868-b0cd-5d1f7ad57f21")
      #         # Ensure response is valid JSON before passing it to Python
      #       if [ -z "$response" ]; then
      #         echo "API response is empty!"
      #         exit 1
      #       fi
      #       # Process JSON in Python and store the result
      #       RESULT=$(python3 -c "import json, sys; 
      #       data = json.loads(sys.argv[1]); 
      #       ids = [(item['id'], item['name']) for item in data]; 
      #       print(json.dumps(ids))" "$response")
      #       python3 - <<EOF
      #           import json
      #           import requests
      #           import os
                
      #           # # Get the environment variable
      #           # val = os.getenv("RESULT", "[]")  # Default to empty list if missing
                
      #           print(f"From Python validation: {val}")
                
      #           # Convert JSON string back to list
      #           try:
      #               data = json.loads(val)  # Ensure it's parsed as JSON
      #               for item in data:
      #                   url = "https://equinor.qtestnet.com/api/v3/projects/119783/test-runs?parentId=7409360&parentType=test-suite"
      #                   payload = json.dumps({
      #                       "name": item[1],  # Correctly access the name value
      #                       "test_case": {
      #                           "id": item[0]  # Correctly access the test case ID
      #                       }
      #                   })
      #                   headers = {
      #                       "Content-Type": "application/json",
      #                       "Authorization": "Bearer ca42f96c-8c1e-4868-b0cd-5d1f7ad57f21"
      #                   }
      #                   response = requests.post(url, headers=headers, data=payload)  # Use `post` for clarity
      #                   print(response.text)
      #           except json.JSONDecodeError as e:
      #               print(f"Error parsing JSON: {e}")
      #           EOF
      #     done
          
          
       

        #Important code:

      # - name: Run the qTest API call
      #   id: qtest_test_case
      #   run: |
      #     set -x
      #     response=$(curl --location 'https://equinor.qtestnet.com/api/v3/projects/119783/test-cases?parentId=9279526&page=1&expandProps=true&expandSteps=no' \
      #               --header 'Authorization: Bearer ca42f96c-8c1e-4868-b0cd-5d1f7ad57f21')
      
      #     # Ensure response is valid JSON before passing it to Python
      #     if [ -z "$response" ]; then
      #       echo "API response is empty!"
      #       exit 1
      #     fi
      
      #     # Process JSON in Python and store the result
      #     RESULT=$(python3 -c "import json, sys; 
      #     data = json.loads(sys.argv[1]); 
      #     ids = [(item['id'], item['name']) for item in data]; 
      #     print(json.dumps(ids))" "$response")
          
      #         echo "RESULT=$RESULT" >> $GITHUB_ENV
      
      # - name: Process Data in Python
      #   run: |
      #           python3 - <<EOF
      #           import json
      #           import requests
      #           import os
                
      #           # Get the environment variable
      #           val = os.getenv("RESULT", "[]")  # Default to empty list if missing
                
      #           print(f"From Python validation: {val}")
                
      #           # Convert JSON string back to list
      #           try:
      #               data = json.loads(val)  # Ensure it's parsed as JSON
      #               for item in data:
      #                   url = "https://equinor.qtestnet.com/api/v3/projects/119783/test-runs?parentId=7409360&parentType=test-suite"
      #                   payload = json.dumps({
      #                       "name": item[1],  # Correctly access the name value
      #                       "test_case": {
      #                           "id": item[0]  # Correctly access the test case ID
      #                       }
      #                   })
      #                   headers = {
      #                       "Content-Type": "application/json",
      #                       "Authorization": "Bearer ca42f96c-8c1e-4868-b0cd-5d1f7ad57f21"
      #                   }
      #                   response = requests.post(url, headers=headers, data=payload)  # Use `post` for clarity
      #                   print(response.text)
      #           except json.JSONDecodeError as e:
      #               print(f"Error parsing JSON: {e}")
      #           EOF
            
                          

      
      # # - name: Print Full Payload
      # #   run: echo "${{ toJson(github.event.client_payload) }}"

      # # - name: Print Issue Key
      # #   run: echo "Issue Key=${{ github.event.client_payload.issueKey }}"

      # # - name: Print Summary
      # #   run: echo "Summary=${{ github.event.client_payload.summary }}"

      # # - name: Print env values
      # #   run: cat $GITHUB_ENV

      # # - name: Print Custom Field
      # #   run: echo "snow_chg_id:" ${{ github.event.client_payload.snow_chg_id }}

      # # - name: Print assignee
      # #   run: echo "Assignee:" ${{ github.event.client_payload.assignee }}

      # # - name: Print description
      # #   run: echo "Description:" ${{ github.event.client_payload.description }}

      # # - name: Update charm id in jira
      # #   shell: bash
      # #   # env:
      # #   #   ISSUE_KEY: "TESTING-18"
      # #   #   CHARM_ID: "1234567"  # Set CHARM_ID directly
      # #   run: |
      # #      response_code=$(curl -o /dev/null -s -w "%{http_code}" -X PUT \
      # #        -u "${{secrets.JIRA_API_USER}}:${{secrets.JIRA_API_TOKEN}}" \
      # #        -H "Content-Type: application/json" \
      # #        -d '{
      # #              "fields": {
      # #                "customfield_10440": "'"123456"'"
      # #              }
      # #            }' \
      # #        "https://your-domain.atlassian.net/rest/api/3/issue/TESTING-18")
      # #      if [ "$response_code" -eq 200 ] || [ "$response_code" -eq 204 ]; 
      # #      then
      # #        echo "Success: The request was successful with status code $response_code."
      # #      else
      # #        echo "Error: The request failed with status code $response_code"
      # #        exit 1
      # #      fi

      # # - name: Generate OAuth Token
      # #   id: generate_token
      # #   # env:
      # #   #    JIRA_API_USER: ${{ secrets.JIRA_API_USER }}
      # #   #    JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      # #   #    # SAP_CLIENT_ID: ${{ secrets.SAP_CLIENT_ID }}
      # #      # SAP_CLIENT_SECRET: ${{ secrets.SAP_CLIENT_SECRET }}
      # #      # SAP_TOKEN_URL: ${{ secrets.SAP_TOKEN_URL }}
      # #      # SAP_CLIENT_ID: h3kpK9Dsh8i51WTZRA50Se7H4GTEcQ3x
      # #      # SAP_CLIENT_SECRET: tttRQgsmV4ocIuJa
      # #      # SAP_TOKEN_URL: https://devequinor.test.apimanagement.eu10.hana.ondemand.com:443/v2/oauth2/token
      # #   run: |
      # #         response=$(curl -X GET \
      # #         -u "${{ secrets.JIRA_API_USER }}:${{ secrets.JIRA_API_TOKEN }}" \
      #         -H "Content-Type: application/json" \
      #          https://eqn-nextgen.atlassian.net/rest/api/2/issue/TESTING-18| grep -o '"customfield_10440":"[^"]*"' | sed 's/.*:"//;s/"$//')
      #         echo $response
      #         echo "response_code=$response_code" >> $GITHUB_ENV

      # - name: Check response code and echo success
      #   run: |
      #     if [ -n "$response_code" ]; then
      #       echo "Success"
      #       response_code=$(curl -o /dev/null -s -w "%{http_code}" -X PUT \
      #       -u "${{ secrets.JIRA_API_USER }}:${{ secrets.JIRA_API_TOKEN }}" \
      #       -H "Content-Type: application/json" \
      #       -d '{
      #             "fields": {
      #               "customfield_10440": "Charm_id_old:" $response_code,"charm_id_new: 1234567" 
      #             }
      #           }' \
      #       "https://eqn-nextgen.atlassian.net/rest/api/3/issue/TESTING-18")
      #     else
      #       response_code=$(curl -o /dev/null -s -w "%{http_code}" -X PUT \
      #       -u "${{ secrets.JIRA_API_USER }}:${{ secrets.JIRA_API_TOKEN }}" \
      #       -H "Content-Type: application/json" \
      #       -d '{
      #             "fields": {
      #               "customfield_10440": "'123455'"
      #             }
      #           }' \
      #       "https://eqn-nextgen.atlassian.net/rest/api/3/issue/TESTING-18")
      #     fi
      # - name: Generate OAuth Token
      #   id: generate_token
      #   run: |
      #     response=&(curl --location 'https://equinor.qtestnet.com/api/v3/projects/119783/test-cases?parentId=9279526&page=1&expandProps=true&expandSteps=no' \
      #               --header 'Authorization: Bearer ca42f96c-8c1e-4868-b0cd-5d1f7ad57f21')
      #     echo $response
      #     echo $response | jq '[.[] | {id: .id, name: .name}]'
      # - name: Check response code and echo success
      #   run: |
      #     if [ -n "${{env.response}}" ]; then
      #       echo "Success: Found response"
      #       response_code=$(curl -o /dev/null -s -w "%{http_code}" -X PUT \
      #         -u "${{ secrets.JIRA_API_USER }}:${{ secrets.JIRA_API_TOKEN }}" \
      #         -H "Content-Type: application/json" \
      #         -d "{
      #               \"fields\": {
      #                 \"customfield_10440\": \"Charm_id_old: ${{env.response}}, charm_id_new: 1234567\"
      #               }
      #             }" \
      #         "https://eqn-nextgen.atlassian.net/rest/api/3/issue/TESTING-18")
      #     else
      #       echo "No response found, using default value"
      #       response_code=$(curl -o /dev/null -s -w "%{http_code}" -X PUT \
      #         -u "${{ secrets.JIRA_API_USER }}:${{ secrets.JIRA_API_TOKEN }}" \
      #         -H "Content-Type: application/json" \
      #         -d "{
      #               \"fields\": {
      #                 \"customfield_10440\": \"123455\"
      #               }
      #             }" \
      #         "https://eqn-nextgen.atlassian.net/rest/api/3/issue/TESTING-18")
      #     fi
      #     echo "Response Code: $response_code"
         
   
           # echo "Token retrieved successfully"
           # echo "Access Token: $token"
   
           # # Save the token as an output for later steps
           # echo "token=$token" >> $GITHUB_ENV
           # curl -s -X POST \
           #  -u "${{ secrets.JIRA_API_USER }}:${{ secrets.JIRA_API_TOKEN }}" \
           # -H "Content-Type: application/json" \
           # --data '{
           #   "transition": {
           #     "id": "151"
           #   }
           # }' \
           # "https://eqn-nextgen.atlassian.net/rest/api/3/issue/TESTING-18/transitions"

         
