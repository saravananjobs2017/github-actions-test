# name: Jira Webhook Trigger

# on:
#   # repository_dispatch:
#   #   types: do-something
#   workflow_dispatch:

# jobs:
#   jira_trigger_job:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#       - name: Print variables
#         run: |
#          echo ${{ github.event.client_payload.jira_issue_key }}
#          echo ${{ github.event.client_payload.jira_assignee }}

name: Triggered from Jira

on:
 workflow_dispatch:
  # repository_dispatch:
  #   types: do-something # Ensure this matches `event_type` in Jira
  
    
jobs:
  process_jira_data:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      # - name: Print Full Payload
      #   run: echo "${{ toJson(github.event.client_payload) }}"

      # - name: Print Issue Key
      #   run: echo "Issue Key=${{ github.event.client_payload.issueKey }}"

      # - name: Print Summary
      #   run: echo "Summary=${{ github.event.client_payload.summary }}"

      # - name: Print env values
      #   run: cat $GITHUB_ENV

      # - name: Print Custom Field
      #   run: echo "snow_chg_id:" ${{ github.event.client_payload.snow_chg_id }}

      # - name: Print assignee
      #   run: echo "Assignee:" ${{ github.event.client_payload.assignee }}

      # - name: Print description
      #   run: echo "Description:" ${{ github.event.client_payload.description }}

      # - name: Update charm id in jira
      #   shell: bash
      #   # env:
      #   #   ISSUE_KEY: "TESTING-18"
      #   #   CHARM_ID: "1234567"  # Set CHARM_ID directly
      #   run: |
      #      response_code=$(curl -o /dev/null -s -w "%{http_code}" -X PUT \
      #        -u "${{secrets.JIRA_API_USER}}:${{secrets.JIRA_API_TOKEN}}" \
      #        -H "Content-Type: application/json" \
      #        -d '{
      #              "fields": {
      #                "customfield_10440": "'"123456"'"
      #              }
      #            }' \
      #        "https://your-domain.atlassian.net/rest/api/3/issue/TESTING-18")
      #      if [ "$response_code" -eq 200 ] || [ "$response_code" -eq 204 ]; 
      #      then
      #        echo "Success: The request was successful with status code $response_code."
      #      else
      #        echo "Error: The request failed with status code $response_code"
      #        exit 1
      #      fi

      - name: Generate OAuth Token
      #   id: generate_token
      #   # env:
      #   #    JIRA_API_USER: ${{ secrets.JIRA_API_USER }}
      #   #    JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      #   #    # SAP_CLIENT_ID: ${{ secrets.SAP_CLIENT_ID }}
      #      # SAP_CLIENT_SECRET: ${{ secrets.SAP_CLIENT_SECRET }}
      #      # SAP_TOKEN_URL: ${{ secrets.SAP_TOKEN_URL }}
      #      # SAP_CLIENT_ID: h3kpK9Dsh8i51WTZRA50Se7H4GTEcQ3x
      #      # SAP_CLIENT_SECRET: tttRQgsmV4ocIuJa
      #      # SAP_TOKEN_URL: https://devequinor.test.apimanagement.eu10.hana.ondemand.com:443/v2/oauth2/token
      #   run: |
      #         response=$(curl -X GET \
      #         -u "${{ secrets.JIRA_API_USER }}:${{ secrets.JIRA_API_TOKEN }}" \
      #         -H "Content-Type: application/json" \
      #          https://eqn-nextgen.atlassian.net/rest/api/2/issue/TESTING-18| grep -o '"customfield_10440":"[^"]*"' | sed 's/.*:"//;s/"$//')
      #         echo $response
      #         echo "response_code=$response_code" >> $GITHUB_ENV

      # - name: Check response code and echo success
      #   run: |
      #     if [ -n "$response_code" ]; then
      #       echo "Success"
      #       response_code=$(curl -o /dev/null -s -w "%{http_code}" -X PUT \
      #       -u "${{ secrets.JIRA_API_USER }}:${{ secrets.JIRA_API_TOKEN }}" \
      #       -H "Content-Type: application/json" \
      #       -d '{
      #             "fields": {
      #               "customfield_10440": "Charm_id_old:" $response_code,"charm_id_new: 1234567" 
      #             }
      #           }' \
      #       "https://eqn-nextgen.atlassian.net/rest/api/3/issue/TESTING-18")
      #     else
      #       response_code=$(curl -o /dev/null -s -w "%{http_code}" -X PUT \
      #       -u "${{ secrets.JIRA_API_USER }}:${{ secrets.JIRA_API_TOKEN }}" \
      #       -H "Content-Type: application/json" \
      #       -d '{
      #             "fields": {
      #               "customfield_10440": "'123455'"
      #             }
      #           }' \
      #       "https://eqn-nextgen.atlassian.net/rest/api/3/issue/TESTING-18")
      #     fi
      - name: Generate OAuth Token
        id: generate_token
        run: |
          response=$(curl -X GET \
            -u "${{ secrets.JIRA_API_USER }}:${{ secrets.JIRA_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            "https://eqn-nextgen.atlassian.net/rest/api/2/issue/TESTING-18" \
            | grep -o '"customfield_10440":"[^"]*"' | sed 's/.*:"//;s/"$//')
          echo "response=$response" >> $GITHUB_ENV

      - name: Check response code and echo success
        run: |
          if [ -n "$response" ]; then
            echo "Success: Found response"
            response_code=$(curl -o /dev/null -s -w "%{http_code}" -X PUT \
              -u "${{ secrets.JIRA_API_USER }}:${{ secrets.JIRA_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{
                    \"fields\": {
                      \"customfield_10440\": \"Charm_id_old: $response, charm_id_new: 1234567\"
                    }
                  }" \
              "https://eqn-nextgen.atlassian.net/rest/api/3/issue/TESTING-18")
          else
            echo "No response found, using default value"
            response_code=$(curl -o /dev/null -s -w "%{http_code}" -X PUT \
              -u "${{ secrets.JIRA_API_USER }}:${{ secrets.JIRA_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{
                    \"fields\": {
                      \"customfield_10440\": \"123455\"
                    }
                  }" \
              "https://eqn-nextgen.atlassian.net/rest/api/3/issue/TESTING-18")
          fi
          echo "Response Code: $response_code"
      
         
           # # Check if the token is empty
           # if [ -z "$token" ]; then
           #   echo "Failed to retrieve access token"
           #   echo "Response: $response"
           #   exit 1
           # fi
   
           # echo "Token retrieved successfully"
           # echo "Access Token: $token"
   
           # # Save the token as an output for later steps
           # echo "token=$token" >> $GITHUB_ENV
           # curl -s -X POST \
           #  -u "${{ secrets.JIRA_API_USER }}:${{ secrets.JIRA_API_TOKEN }}" \
           # -H "Content-Type: application/json" \
           # --data '{
           #   "transition": {
           #     "id": "151"
           #   }
           # }' \
           # "https://eqn-nextgen.atlassian.net/rest/api/3/issue/TESTING-18/transitions"

         
